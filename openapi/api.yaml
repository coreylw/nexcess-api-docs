openapi: 3.0.0
info:
  title: Nexcess
  description: 'TODO: Add Description'
  contact: {}
  version: '1.0'
servers:
- url: https://v1
  variables: {}
paths:
  /login:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
    post:
      tags:
      - Authentication
      summary: Login
      description: >-
        Client user authentication with a username and password.
        A successful response includes a time-limited Bearer token to be included in the Authorization header on subsequent requests.
        This endpoint is mainly intended for use by web applications, which would store the token for use during the user's logged-in session. (When the token expires, requests will recieve 401 responses.) For general API usage, an api token should be used instead. @see api-token:add
      operationId: Login
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: user@example.com
              password: KlaatuBaradaNikto
        required: true
      responses:
        200:
          description: The temporary API token was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorization:
                    type: string
                    example: VGFjb3MgYXJlIGRlbGljaW91cwo=
                  user:
                    $ref: '#/components/schemas/User'
                  client:
                    $ref: '#/components/schemas/Client'
        401:
          description: Incorrect username or password.
        403:
          $ref: '#/components/responses/Forbidden'
      deprecated: false
  /user/self:
    get:
      tags:
      - Users
      summary: Get User (self)
      description: Shows information about the currently-authenticated client user.
      operationId: GetUser(self)
      responses:
        200:
          description: Got a current API User.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  password:
                    $ref: '#/components/schemas/Password'
                  permissions:
                    $ref: '#/components/schemas/UserPermissions'
                  settings:
                    $ref: '#/components/schemas/UserSettings'
                  resources:
                    $ref: '#/components/schemas/UserResources'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
      deprecated: false
  /api-token:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
    post:
      tags:
      - API Tokens
      summary: Create API Token
      description: >-
        Creates a new api token. 
        The new api token is returned in the response payload. 
        This is the only time it will be accessible to the user; it will never be displayed again.
      operationId: CreateAPIToken
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPITokenRequest'
            example:
              name: test-name
        required: true
      responses:
        200:
          description: 'Successfully created API token.'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIToken'
                  - type: object
                    properties:
                      token:
                        type: string
                        example: VGFjb3MgYXJlIGRlbGljaW91cwo=
                        description: The name of the API token.

        401:
          description: Invalid username or password.
        422:
          $ref: '#/components/responses/ValidationError'
      deprecated: false
    get:
      tags:
      - API Tokens
      summary: List API Tokens
      description: Lists api tokens that belong to the logged-in user.
      operationId: ListAPITokens
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/sortOrder'
      - $ref: '#/components/parameters/sortBy'
      - name: filter
        in: query
        schema:
          type: enum
          example: name
          items:
            - name
            - id
      responses:
        200:
          description: Successfully retrieved API tokens.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIToken'
        401:
          $ref: '#/components/responses/AuthenticationError'
        416:
          $ref: '#/components/responses/RangeError'
        422:
          $ref: '#/components/responses/ValidationError'
      deprecated: false
  /api-token/{token_id}:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
    get:
      tags:
      - API Tokens
      summary: Get API Token
      description: Shows an api token.
      operationId: GetAPIToken
      responses:
        200:
          description: 'Successfully retrieved API Token.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIToken'
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NotFound'
      deprecated: false
    post:
      tags:
      - API Tokens
      summary: Update API Token
      description: >-
        Edits an api token.
        Edit requests are queued, meaning they will be completed out-of-band from the current request. The response payload will describe the requested task, and will also include a Location header that can be polled to determine the status of the task. @see task:show.
      operationId: UpdateAPIToken
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAPITokenRequest'
            example:
              name: test-name
        required: true
      responses:
        202:
          description: Successfully updating API Token.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Operation'
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NotFound'
      deprecated: false
    delete:
      tags:
      - API Tokens
      summary: Delete API Token
      description: >-
        Edits an api token.
        Edit requests are queued, meaning they will be completed out-of-band from the current request. The response payload will describe the requested task, and will also include a Location header that can be polled to determine the status of the task. @see task:show.
      operationId: DeleteAPIToken
      responses:
        202:
          description: Successfully deleting API Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NotFound'
      deprecated: false
  /cloud-account:
    parameters:
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/Accept'
    post:
      tags:
      - Cloud Accounts
      summary: Create Cloud Account
      description: >-
        Creates a new cloud account and orders an associated service.
        Add requests are queued, meaning they will be completed out-of-band from the current request. The response payload will describe the requested task, and will also include a Location header that can be polled to determine the status of the task. @see task:show.
      operationId: CreateCloudAccount
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCloudAccountRequest'
        required: true
      responses:
        202:
          description: Successfully creating clound account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 12
                  identity:
                    type: string
                    example: cloud-account:add (pending)
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'
      deprecated: false
    get:
      post:
      tags:
      - Cloud Accounts
      summary: List Cloud Accounts
      description: Lists a client's cloud accounts.
      operationId: ListCloudAccounts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortBy'
      responses:
        200:
          description: Successfully retrieved clound accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CloudAccount'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        416:
          $ref: '#/components/responses/RangeError'
      deprecated: false
components:
  parameters:
    page:
      in: query
      name: page
      description: The requested page number
      schema:
        type: integer
        default: 1
    pageSize:
      in: query
      name: page_size
      description: The size of each requested page
      schema:
        type: integer
        default: 100
    sortOrder:
      in: query
      name: sortOrder
      description: The requested page number
      schema:
        type: enum
        example: ASC
        items:
          - ASC
          - DESC
    sortBy:
      name: sortBy
      description: Field to sort by.
      in: query
      example: name
    ContentType:
      name: Content-Type
      in: header
      description: ''
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: application/json
    Accept:
      name: Accept
      in: header
      description: ''
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: application/json
  schemas:
    CloudAccount:
      type: object
      properties:
        id:
          type: integer
          example: 91011
        identity:
          type: string
          example: cloud-account.example.com
        domain:
          type: string
          example: cloud-account.example.com
        temp_domain:
          type: string
          example: fe12c2ad4e.nxcli.net
        state:
          type: enum
          example: stable
          items:
            - stable
        ip:
          type: string
          format: ipv4
          example: 203.0.113.1
        app:
          type: object
          properties:
            id:
              type: integer
              example: 123
            identity:
              type: string
              example: flexible
        location:
          type: object
          properties:
            id:
              type: integer
              example: 45
            identity:
              type: string
              example: us-midwest-1
        package:
          type: object
          properties:
            id:
              type: integer
              example: 678
            identity:
              type: string
              example: nc.small
        parent_account:
          type: integer
    User:
      type: object
      properties:
        id:
          type: integer
          example: 27767
        identity:
          type: string
          example: Annabel Whyman - user@nocworx.com
        first_name:
          type: string
          example: Annabel
        last_name:
          type: string
          example: Whyman
        activated:
          type: boolean
        beta_tester:
          type: boolean
        email:
          type: string
          format: email
        verified:
          type: boolean
        status:
          type: enum
          example: active
          items:
            - active
        client:
          $ref: '#/components/schemas/Client'
        is_owner:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Client'
        access:
          type: object
          properties:
            area:
              type: string
              example: extranet
            company:
              $ref: '#/components/schemas/Client'
            locked:
              type: boolean
            login_enable_date:
              type: integer
              example: 1559822176
    UserPermissions:
      type: object
      properties:
        ACCOUNT:
          type: integer
          example: 6
        USERS:
          type: integer
          example: 7
        USER-ROLES:
          type: integer
          example: 7
        ADDRESSES:
          type: integer
          example: 7
        TICKETS:
          type: integer
          example: 6
        INVOICES:
          type: integer
          example: 4
        PAYMENTS:
          type: integer
          example: 6
        CREDITS:
          type: integer
          example: 4
        ORDERS:
          type: integer
          example: 6
        CREDITCARDS:
          type: integer
          example: 7
        AFFILIATE-SETTINGS:
          type: integer
          example: 7
        SERVICES:
          type: integer
          example: 7
        DNS:
          type: integer
          example: 7
        BILLING:
          type: integer
          example: 4
        TECHNICAL:
          type: integer
          example: 4
        PUBLIC:
          type: integer
          example: 7
    UserSettings:
      type: object
      properties:
        client-user.pagination.perpage:
          type: integer
          example: 25
        client-user.login.alert.unknown-device:
          type: iteger
          example: 1
        client-user.login.password-blacklist:
          type: string
          example: "qwertyasdfzxcvbn\r\ncorrecthorsebatterystaple\r\nnexcess\r\nthermo"
        client-user.login.password-check-history:
          type: integer
          example: 0
        client-user.login.password-expires:
          type: integer
          example: 0
        client-user.login.password-strength:
          type: integer
          example: 3
        feedback_department:
          type: integer
        perfectaudience:
          type: integer
    Password:
      type: object
      properties:
        expired:
          type: boolean
        expires_in:
          type: integer
          example: 0
    UserResources:
      type: object
      properties:
        knowledgebase:
          type: object
          properties:
            name:
              type: string
              example: Knowledge Library
            link:
              type: string
              format: uri
        git_access_tokens:
          type: array
          items:
            $ref: '#/components/schemas/GitAccessToken'
    GitAccessToken:
      type: object
      properties:
        id:
          type: integer
        identity:
          type: string
          example: myidentity
    Client:
      type: object
      properties:
        id:
          type: string
          example: 34050
          description: ID of the client.
        identity:
          type: string
          example: Superuser
          description: Identity of the client.
    APIToken:
      type: object
      properties:
        id:
          type: integer
          example: 16
          description: The id of the API token.
        identity:
          type: string
          example: chuck
          description: The identity of the API token.
        name:
          type: string
          example: chuck
          description: The name of the API token.
    Operation:
      type: object
      properties:
        id:
          type: integer
          example: 0
        identity:
          type: string
          example: "api-token:edit (pending)"
        uuid:
          type: string
          format: uuid
          example: "34595a2b-40b8-4021-9f0d-6f3e96c8462a"
        action:
          type: string
          example: "api-token:edit"
        status:
          type: enum
          example: pending
          enum:
            - pending
        request_date:
          type: integer
          example: 1562959696
        resource_uri:
          type: string
        staff_user:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
              example: 27767
            identity:
              type: string
              example: "Annabel Whyman - user@nocworx.com"
    LoginRequest:
      title: LoginRequest
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
          description: Email address of the user.
        password:
          type: string
          description: The user's password.
        code:
          type: string
          description: 2FA code enabled/required by client settings.
        client_id:
          type: string
          description: ID of client account to log in as. Users can belong to more than one client account. If not specified, logs in as the most recently logged-in client.
      example:
        username: user@example.com
        password: KlaatuBaradaNikto
    CreateAPITokenRequest:
      title: CreateAPITokenRequest
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: test-name
    UpdateAPITokenRequest:
      title: UpdateAPITokenRequest
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: test-name
    CreateCloudAccountRequest:
      title: CreateCloudAccountRequest
      required:
      - app_id 
      - cloud_id 
      - domain 
      - install_app
      - package_id
      type: object
      properties:
        app_id:
          type: integer
          example: 123
        cloud_id:
          type: integer
          example: 45
        domain:
          type: integer
          example: cloud-account.example.com
        install_app:
          type: boolean
        package_id:
          type: integer
          example: 678
  securitySchemes:
    httpBearer:
      type: http
      scheme: bearer
  responses:
    AuthenticationError:
      description: Not logged in
    Forbidden:
      description: Insufficient permissions
    ValidationError:
      description: Invalid input
    NotFound:
      description: Resource not found
    RangeError:
      description: Bad range (page number/size)
security:
- httpBearer: []
tags:
- name: Authentication
- name: Users
- name: API Tokens
